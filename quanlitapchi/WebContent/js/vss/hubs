/*!
 * ASP.NET SignalR JavaScript Library v2.2.0
 * http://signalr.net/
 *
 * Copyright Microsoft Open Technologies, Inc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/SignalR/SignalR/blob/master/LICENSE.md
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['asyncGitOperationHub'] = this.createHubProxy('asyncGitOperationHub'); 
        proxies['asyncGitOperationHub'].client = { };
        proxies['asyncGitOperationHub'].server = {
            subscribe: function (operationId) {
                return proxies['asyncGitOperationHub'].invoke.apply(proxies['asyncGitOperationHub'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (operationId) {
                return proxies['asyncGitOperationHub'].invoke.apply(proxies['asyncGitOperationHub'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['buildDetailHub'] = this.createHubProxy('buildDetailHub'); 
        proxies['buildDetailHub'].client = { };
        proxies['buildDetailHub'].server = {
            stopWatchingBuild: function (buildId) {
                return proxies['buildDetailHub'].invoke.apply(proxies['buildDetailHub'], $.merge(["StopWatchingBuild"], $.makeArray(arguments)));
             },

            stopWatchingProjects: function () {
                return proxies['buildDetailHub'].invoke.apply(proxies['buildDetailHub'], $.merge(["StopWatchingProjects"], $.makeArray(arguments)));
             },

            watchBuild: function (buildId) {
                return proxies['buildDetailHub'].invoke.apply(proxies['buildDetailHub'], $.merge(["WatchBuild"], $.makeArray(arguments)));
             },

            watchProject: function () {
                return proxies['buildDetailHub'].invoke.apply(proxies['buildDetailHub'], $.merge(["WatchProject"], $.makeArray(arguments)));
             }
        };

        proxies['chatHub'] = this.createHubProxy('chatHub'); 
        proxies['chatHub'].client = { };
        proxies['chatHub'].server = {
            getMessages: function (roomId, endTime, startTime) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["GetMessages"], $.makeArray(arguments)));
             },

            getOnlineMembers: function (roomId) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["GetOnlineMembers"], $.makeArray(arguments)));
             },

            getRecentMessages: function (roomId) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["GetRecentMessages"], $.makeArray(arguments)));
             },

            joinRoom: function (roomId) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["JoinRoom"], $.makeArray(arguments)));
             },

            leaveRoom: function (roomId) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["LeaveRoom"], $.makeArray(arguments)));
             },

            sendMessage: function (roomId, content) {
                return proxies['chatHub'].invoke.apply(proxies['chatHub'], $.merge(["SendMessage"], $.makeArray(arguments)));
             }
        };

        proxies['codeReviewDetailHub'] = this.createHubProxy('codeReviewDetailHub'); 
        proxies['codeReviewDetailHub'].client = { };
        proxies['codeReviewDetailHub'].server = {
            stopWatchingReview: function (reviewId) {
                return proxies['codeReviewDetailHub'].invoke.apply(proxies['codeReviewDetailHub'], $.merge(["StopWatchingReview"], $.makeArray(arguments)));
             },

            watchReview: function (reviewId) {
                return proxies['codeReviewDetailHub'].invoke.apply(proxies['codeReviewDetailHub'], $.merge(["WatchReview"], $.makeArray(arguments)));
             }
        };

        proxies['kanbanBoardHub'] = this.createHubProxy('kanbanBoardHub'); 
        proxies['kanbanBoardHub'].client = { };
        proxies['kanbanBoardHub'].server = {
            unwatchKanbanbBoard: function (workItemTypeExtensionId) {
                return proxies['kanbanBoardHub'].invoke.apply(proxies['kanbanBoardHub'], $.merge(["UnwatchKanbanbBoard"], $.makeArray(arguments)));
             },

            watchKanbanBoard: function (workItemTypeExtensionId) {
                return proxies['kanbanBoardHub'].invoke.apply(proxies['kanbanBoardHub'], $.merge(["WatchKanbanBoard"], $.makeArray(arguments)));
             }
        };

        proxies['realTimeNotificationHub'] = this.createHubProxy('realTimeNotificationHub'); 
        proxies['realTimeNotificationHub'].client = { };
        proxies['realTimeNotificationHub'].server = {
            startMonitor: function (collectionId) {
                return proxies['realTimeNotificationHub'].invoke.apply(proxies['realTimeNotificationHub'], $.merge(["StartMonitor"], $.makeArray(arguments)));
             }
        };

        proxies['taskAgentPoolHub'] = this.createHubProxy('taskAgentPoolHub'); 
        proxies['taskAgentPoolHub'].client = { };
        proxies['taskAgentPoolHub'].server = {
            subscribe: function (poolId) {
                return proxies['taskAgentPoolHub'].invoke.apply(proxies['taskAgentPoolHub'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (poolId) {
                return proxies['taskAgentPoolHub'].invoke.apply(proxies['taskAgentPoolHub'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));